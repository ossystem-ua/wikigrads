<?php

/**
 * Document
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox_old
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Document extends BaseDocument
{
    
    #####
    # Boolean
    ###
    
    /**
     * Is Owner
     * 
     * Check to see if the user is document author.
     *
     * @param sfGuardUser $user
     * @return unknown
     */
    public function isOwner(sfGuardUser $user)
    {
        return $this->user_id == $user->id;
    } 
    
    #####
    # Fetch
    ###
    
    /**
     * Get Local Path
     * 
     * Get local filepath for file. Used for system requests.
     *
     * @return unknown
     */
    public function getLocalPath()
    {
        return sfConfig::get('sf_upload_dir').'/document/course/'.$this->course_id.'/'.$this->file;
    }
    
    
    public function getNotification(){
       return Doctrine_Core::getTable('Notification')->createQuery('n')
                ->where('n.object_id = ?', $this->getId())
               ->addWhere('n.object_name = ? ', Notification::DOCUMENT_OBJECT)
                ->addWhere('n.deleted_at IS NULL')
                ->fetchOne()
        ;
    }
    
    /**
     * Get mime type according to extension
     * 
     * @return string
     */
    public function getMimeType()
    {
    
        return mime_content_type($this->getLocalPath());
    }
    
    /**
     * Returns clean version of file name with extension
     * @return type
     */
    public function getSanitizedFileName()
    {
        $file_parts = explode('.', $this->getFile());

        $extension = strtolower(array_pop($file_parts));

        $name = $this->getFile();
        /*
        $name = $this->getName();
        if (strlen($name) <= 0) {
            $name = $this->getFile();
        } else {
            //$name .= $extension;
        }
        
        //$name = basename($name);
        
        if (strpos($name, 'document_name', 0) !== false) {
            $name = 'upload_doc_'.$this->getId();
        }
        
        $name = str_replace("_", " ", $name);
        */
        return Utils::sanitizeFileName($name);        
        
    }
}
