<?php

/**
 * School
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf_sandbox_old
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class School extends BaseSchool
{
    public function getUserSchoolFormName()
    {
        return str_replace('-', '_', $this->slug);
    }
    
 //   public function __toString()
 //   {
 //       return $this->name;
 //   }
    /**
     * Get Students
     * 
     * Get list of active students for school
     *
     * @return unknown
     */
    public function getStudents($limit = false)
    {
        $sql = Doctrine_Core::getTable('sfGuardUser')->createQuery('u')
            ->leftJoin('u.Schools s')
            ->where('s.id = ?', $this->id)
            ->addWhere('u.is_active = ?', true);
        ;
        if ($limit) {
            $sql->orderBy('RAND()')->limit($limit);
        } else {
            $sql->orderBy('u.last_name, u.first_name');
        }
        
        
        
        return $sql->execute();
    }
    
    
    /**
     * Returns newest active members
     * @static
     * @param int $limit
     * @return mixed
     */
    protected function getNewMembersQuery() {
        $sql = Doctrine_Core::getTable('sfGuardUser')->createQuery('u')
            ->leftJoin('u.UserSchool us')
            ->where('us.school_id = ?', $this->id)   
            ->addWhere('u.is_active = ?', true)
            ->orderBy('u.created_at DESC')
       ;
       return $sql;
    }
     
    public function getNewMembers($options=array()){
        $limit = Utils::getOptionValue($options, 'limit');
        $offset = Utils::getOptionValue($options, 'offset', 0); // will default to false if value is 0
        $recs_per_page = Utils::getOptionValue($options, 'recs_per_page');
        
        $sql = $this->getNewMembersQuery();
        if($limit)  { $sql->limit($limit); }    // supports standalone doctrine limit()
        
        // or supports LIMIT(offset, num_recs)
        if($recs_per_page) {
            $sql->offset($offset);
            $sql->limit($recs_per_page);
        }
                
        return $sql->execute();
    }   
    
    public function getNewMembersCount() {
        $sql = $this->getNewMembersQuery();
        return $sql->count();
    }    
    
    public function getSchoolNameAndLmsDomain() {
        
        $guesses = array('name', 'title', 'description', 'subject', 'keywords', 'id');

        foreach ($guesses as $descriptionColumn)
        { 
          try
          {
            return (string) $this->get($descriptionColumn).' ('.$this->get('lms_domain').')';
          } catch (Exception $e) {}
        }

        return sprintf('No description for object of class "%s"', $this->getTable()->getComponentName());
    }

}
