<?php

/**
 * NotificationTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class NotificationTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object NotificationTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Notification');
    }


    public static function insertNotifications($activityObject, $action, $type, $conn = null){


        if (!$activityObject) {
                throw new Exception('Invalid Input: Object');
        }

        if (!$conn) {
            $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
        }

        try {
            $conn->beginTransaction();

            $save_user_notification = true;

            $notification = new Notification();
            $notification->setObjectId($activityObject->getId());
            $notification->setObjectName($activityObject->getTable()->getClassnameToReturn());

            $send_email = false;
            $emailSubject = "";
            $emailBody = "";

            if($activityObject instanceof Post){
                $notification->setRelatedObjectId($activityObject->getObjectId());
                $notification->setRelatedObjectName($activityObject->getObjectName());

                //Check if this is post is for a course
                if ($activityObject) {
                    if($activityObject->getObjectName() == Post::COURSE_OBJECT){
                        $send_email = true;
                    }

                    //Check if this activity is a comment
                    if($activityObject->getNotification()){
                        //Comment activity should not show in the feeds
                        $save_user_notification = false;

                        //Users should get an email when the comment is related to a course notification
                        if($activityObject->getNotification()->getRelatedObjectName() == Notification::COURSE_RELATED_OBJECT){
                            $send_email = true;
                        }
                    }
                }
            }

            elseif($activityObject instanceof UserCourse || $activityObject instanceof Document){
                $notification->setRelatedObjectId($activityObject->getCourseId());
                $notification->setRelatedObjectName(Notification::COURSE_RELATED_OBJECT);

                $send_email = false;

            }
            elseif ($activityObject instanceof UserSchool) {
                $notification->setRelatedObjectId($activityObject->getSchoolId());
                $notification->setRelatedObjectName(Notification::SCHOOL_RELATED_OBJECT);
            }
            elseif($activityObject instanceof Friend){
                $notification->setRelatedObjectId($activityObject->getUser()->getMainSchool()->getId());
                $notification->setRelatedObjectName(Notification::SCHOOL_RELATED_OBJECT);
            }

            $notification->setAction($action);
            $notification->setType($type);
            $notification->save();

            /*
            $courseId = 0;
            if ($notification) {
                if ($notification->getRelatedObjectName() == "Course") {
                    $courseId = $notification->getRelatedObjectId();
                } else if($notification->getRelatedObjectName() == "Notification") {
                    $not = Doctrine::getTable('Notification')->findOneBy("id", $notification->getRelatedObjectId());
                    if ($not) {
                        if ($not->getRelatedObjectName() == "Course") {
                            $courseId = $not->getRelatedObjectId();
                        }
                    }
                }
            }

            $userRes = array();
            if ($course > 0) {
                $result = Doctrine::getTable('UserCourse')->findBy("course_id", $courseId);
                foreach ($result as $record) {
                    $userRes[] = $record['user_id'];
                }
            }print_r($userRes);
            */
            if ($notification->getRelatedObjectName() == "Notification") {
                $postObjectId = $activityObject->getObjectId();
                $notificationObject = Doctrine::getTable('Notification')->findOneBy("id", $postObjectId);
                $notificationObjectId = $notificationObject->getObjectId();
                $userId = Doctrine::getTable('Post')->findOneBy("id", $notificationObjectId);
                $userId = $userId->getUserId();
                $postUserStaff = Doctrine::getTable('sfGuardUserProfile')->findOneBy("user_id", $userId)->getIsStaff();
            } elseif ($notification->getRelatedObjectName() == "Course") {
                
                $postUserStaff = Doctrine::getTable('sfGuardUserProfile')->findOneBy("user_id", $activityObject->getUserId())->getIsStaff();
            }
            
            $usersToNotify = self::getUsersToNotifyByActivity($activityObject, $type);
            if($usersToNotify){
                $mailer = sfContext::getInstance()->getMailer();
                sfContext::getInstance()->getConfiguration()->loadHelpers('Partial');

                foreach($usersToNotify as $user){
                    $profile = $user->getSfGuardUserProfile();
                    if($save_user_notification){
                        $userNotification = self::saveUserNotification($user, $notification);
                    }
//                    if (!$profile->getEmailFrom()) {
//                        $bSend = false;
//                        if (($notification->getRelatedObjectName() == "Course" && $profile->getEmailPost() == true) ||
//                            ($notification->getRelatedObjectName() == "Notification" && $profile->getEmailPost() == true)) {
//                                $bSend = true; 
//                        } else if ($notification->getRelatedObjectName() == "Notification" &&
//                                   $profile->getEmailReply() == true &&
//                                   $userId == $profile->getUserId()
//                                ) {
//                            $bSend = true; 
////                        } else if ($notification->getRelatedObjectName() == "Notification" && $notification->getRelatedObjectName() == "Course") {
////                            $bSend = true; 
//                        }
//
//                        if ($bSend && $user->getEmailAddress() != NULL || $user->getLmsEmail()) {
//                            //If email is set to be sent do not email the user that created this activity
//                            if($send_email && $activityObject->getUserId() != $user->getId()){ 
//                                self::sendUserNotificationEmail($user, $activityObject, $mailer);
//                            }
//                        }
//                    }

                    if (!$profile->getEmailFrom()) {
                        $bSend = false;
                        //Email me when any new post or comment is made in the "Course Feed" or "Private Feeds"
                        if ($profile->getEmailPost() && 
                           ($notification->getRelatedObjectName() == "Course" || 
                            $notification->getRelatedObjectName() == "Notification"))
                        {
                            if ($profile->getIsStaff() != 1 && 
                                $activityObject->getPrivate() > 0 && 
                                $activityObject->getPrivate() != $profile->getUserId())
                            {
                                $bSend = false;
                            } else {
                                $bSend = true;
                            }
                        }
                        //Only email me when students comment on one of my posts in the "Course Feed" or write me a private post
                        //Only email me when: 1) I receive a comment to one of my posts in the "Course Feed",	2) an instructor writes me a private post, or 3) an instructor writes a post in the "Course Feed"
                        elseif ($profile->getEmailReply())
                        {
                            if ($profile->getIsStaff() == 1 && 
                                ($notification->getRelatedObjectName() == "Notification" && 
                                 $userId == $profile->getUserId()) || 
                                 ($activityObject->getPrivate() > 0 && $profile->getIsStaff() == 1) && 
                                 ($notification->getRelatedObjectName() != "Course" && $activityObject->getPrivate() == 0))
                            {
                                $bSend = true;
                            } elseif (($postUserStaff == 1 && $notification->getRelatedObjectName() == "Course" && $activityObject->getPrivate() == 0) ||
                                      (($notification->getRelatedObjectName() == "Notification" && 
                                       $userId == $profile->getUserId()) || 
                                       $activityObject->getPrivate() == $profile->getUserId()))
                            {
                                $bSend = true;
                            }
                        }
                        //Only email me when user write me private posts
                        elseif ($profile->getEmailPrivate() && 
                                (($activityObject->getPrivate() > 0 && $profile->getIsStaff() == 1) ||
                                ($activityObject->getPrivate() == $profile->getUserId() && $profile->getIsStaff() != 1)))
                        {
                            $bSend = true;
                        }
                        
                        if ($bSend && $user->getEmailAddress() != NULL || $user->getLmsEmail()) {
                            //If email is set to be sent do not email the user that created this activity
                            if($send_email && $activityObject->getUserId() != $user->getId()){
//                                var_dump($mailer); exit;
                                self::sendUserNotificationEmail($user, $activityObject, $mailer);
                            }
                        }
                    }
                }

            }
/**/

            $conn->commit();

        } catch (Exception $e) {
            $conn->rollback();

            throw $e;
        }
        return $notification;
    }

    /**
     * Returns the list of users that need to be notified for this activity
     * @param type $activityObject
     * @param type $type
     */
    protected static function getUsersToNotifyByActivity($activityObject, $type, $userRes = array()){


        switch ($type) {
            case Notification::CLASSMATE_TYPE:
                if($activityObject instanceof Course){
                    $usersToNotify = $activityObject->getStudents();
                }
                elseif($activityObject instanceof Post){
                    if($postCourse = $activityObject->getCourse())
                    {
                        $usersToNotify = $postCourse->getStudents();
                    }
                    elseif($postNotification = $activityObject->getNotification()){
                       $usersToNotify = $postNotification->getNotifiedUsers();
                    }
                }
                elseif($activityObject instanceof UserCourse || $activityObject instanceof Document){
                    $usersToNotify = $activityObject->getCourse()->getStudents();
                }
                break;

            case Notification::FRIEND_TYPE:
                if($activityObject instanceof Post){
                    if($course = $activityObject->getCourse()){
                        $usersToNotify = $activityObject->getUser()->getFriendsByCourse($course);
                    }
                    elseif($postNotification = $activityObject->getNotification()){
                       $usersToNotify = $postNotification->getNotifiedUsers();
                    }
                }

                break;
            case Notification::EVERYONE_TYPE:
                $school = $activityObject->getUser()->getMainSchool();
                $usersToNotify = $school->getStudents();

                break;
            default:
                throw new Exception('Invalid Input: Type');

        }

        return $usersToNotify;

    }


    /**
     * Save individual user notification
     *
     * @param type $user
     * @return \UserNotification
     */
    public static function saveUserNotification($user, $notification){
        $userNotification = new UserNotification();
        $userNotification->setUserId($user->getId());
        $userNotification->setNotificationId($notification->getId());
        $userNotification->setIsSeen(false);
        $userNotification->save();

        return $userNotification;
    }

    /**
     * Send user notification via email according to notification
     * @param type $user
     * @param type $activityObject
     * @param type $mailer
     */
    protected static function sendUserNotificationEmail($user, $activityObject, $mailer = null){
        if(is_null($mailer)){
             $mailer = sfContext::getInstance()->getMailer();
        }

        
        if($activityObject instanceof Post){
            $email_subject = "Post or comment";

            $email_body = get_partial('notification/post_comment_email', array(
                'user_first_name' => $user->getFirstName(),
                'post' => $activityObject
            ));

        }

        if($activityObject instanceof UserCourse){
            $email_subject = "Same class notification";

            $email_body = get_partial('notification/user_course_email', array(
                'user_first_name' => $user->getFirstName(),
                'userCourse' => $activityObject
            ));
        }

        if($activityObject instanceof Document){
            $email_subject = "Document added";

            $email_body = get_partial('notification/document_email', array(
                'user_first_name' => $user->getFirstName(),
                'document' => $activityObject
            ));
        }

        $address = sfConfig::get('app_address_noreply');
        if ($user->getIsLms()) {
            $email = $user->getLmsEmail();
        } else {
            $email   = $user->getEmailAddress();
        }

        $message = $mailer->compose($address,
                          $email,
                          $email_subject,
                          $email_body
                   );
//var_dump($address, $email, $email_subject, $email_body); exit;
        $message->setContentType("text/html");
        $mailer->send($message);

    }


    #####
    # Fetch
    ###

    /**
     * Return notificatons that are related to this course_id
     *
     * @param type $course_id
     * @param type $limit
     * @return type
     */
    public static function getNotificationsByCourseId($course_id, $limit = false)
    {
        $sql = Doctrine_Core::getTable('Notification')->createQuery('n')
                ->where('n.related_object_id = ?', $course_id)
                ->andWhere('n.related_object_name = ?', Notification::COURSE_RELATED_OBJECT)
                ->orderBy('n.created_at DESC')
        ;

        if ($limit) {
            $sql->limit($limit);
        }

        return $sql->execute();
    }

    /**
     * Return notifications that are related to this school_id
     *
     * @param type $school_id
     * @param type $limit
     * @return type
     */
    public static function getNotificationsBySchoolId($school_id, $limit = false)
    {
        $sql = Doctrine_Core::getTable('Notification')->createQuery('n')
                ->where('n.related_object_id = ?', $school_id)
                ->andWhere('n.related_object_name = ?', Notification::SCHOOL_RELATED_OBJECT)
                ->orderBy('n.created_at DESC')
        ;

        if ($limit) {
            $sql->limit($limit);
        }

        return $sql->execute();
    }



    /**
    * Retrieves all associated objects for a Doctrine Collection of notifications. It uses one query to do so.
    *
    * @param Doctrine_Collection $notifications - must be indexed on notification.id
    * @options Array - options as follows:
    * - purge_unhydrated: if an object is not found for a notification, then the notification is removed from the collection
    *
    */
    public static function hydrateNotificationObjects(Doctrine_Collection $notifications, $options = array()) {
        $purge_unhydrated = Utils::getOptionValue($options, 'purge_unhydrated', true);

        // first collect ids per object type
        $objIDs = array();
        foreach($notifications as $n) {
            $objIDs[$n->getObjectName()][] = $n->getObjectId();
        }

        foreach($objIDs as $objectName=>$ids) {
            $dq = Doctrine_Core::getTable($objectName)->createQuery('o INDEXBY o.id')
                ->leftJoin('o.User u') // 'User' is sfGuardUser in schema
                ->whereIn('o.id', $ids)
            ;
            #Utils::dq_to_sql($dq);
            $objs[$objectName] = $dq->execute();
        }

        // update the notifications with instances of their objects
        $nIDs_no_object = array(); // contains ids of notifications where its object could not be found.
        foreach($notifications as $n) {
            if(isset($objs[$n->getObjectName()][$n->getObjectId()])) {
                $n->setObjectInstance($objs[$n->getObjectName()][$n->getObjectId()]);
            } else {
                $nIDs_no_object[] = $n->getId();
            }
        }

        if($purge_unhydrated) {
            foreach($nIDs_no_object as $id) {
                unset($notifications[$id]);
            }
        }
    }

    public static function setNotificationPermissions($courses, $friends, Doctrine_Collection $notifications) {
        foreach($notifications as $n) {
            $objName = $n->getObjectName();
            if($objName == 'Document') {
                if($obj = $n->getObject()) {
                    $course_id = $obj->getCourseId();
                    $hasCourse = true; // default, in case doc is not associated with a course (was set for everyone)
                    if($course_id) {
                        $hasCourse = (isset($courses[$course_id]));
                    }
                    $isFriend = (isset($friends[$obj->getUserId()]));
                    #Utils::pfa(array('isFriend'=>$isFriend, 'hasCourse'=> $hasCourse, 'docCourseID'=>$course_id));

                    $n->setPermission('download', ($hasCourse && $isFriend));
                }
            }
        }
    }

    public static function setNotificationFriendStatus($user, $friends, $friendsPending, Doctrine_Collection $notifications) {
        foreach($notifications as $n) {
            $obj = $n->getObject();

            if($obj) {
                $isFriend = (isset($friends[$obj->getUserId()]));
                $n->setIsUserFriend($isFriend);
                if( ! $isFriend) {
                    $isFriendPending = (isset($friendsPending[$obj->getUserId()]));
                    $n->setIsUserFriendPending($isFriendPending);
                }

                $isSelf = ($user->getId() == $obj->getUserId());
                $n->setIsUserSelf($isSelf);
            } else {
                echo '<div>did not find an object for n.id:'.$n->id.', object_name: '.$n->getObjectName().', object_id: '.$n->getObjectId().'</div>';
            }
        }
    }

    public static function setNotificationComments($notifications) {
        return;
        $nIDs = array();
        foreach($notifications as $n) {
            $nIDs[] = $n->getId();
        }

        $sql = Doctrine_Core::getTable('Post')->createQuery('p')
             ->where('p.object_name = ?', Post::NOTIFICATION_OBJECT)
             ->andWhereIn('p.object_id', $nIDs)
             ->orderBy('p.object_id, p.created_at DESC')
        ;
        $rawComms = $sql->execute();
        #Utils::pfa($rawComms->toArray());  return;

        $comms = array(); // comments grouped by notification
        foreach($rawComms as $c) {
            $comms[$c['object_id']][] = $c;
        }
        Utils::pfa($comms);

        foreach($notifications as $n) {
            if(isset($comms[$n->getId()])) {
                $n->setComments($comms[$n->getId()]);
            }
        }
    }
}


