<?php

/**
 * BaseNotification
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $object_id
 * @property string $object_name
 * @property integer $related_object_id
 * @property string $related_object_name
 * @property string $template
 * @property enum $action
 * @property enum $type
 * @property Doctrine_Collection $UserNotification
 * @property Doctrine_Collection $UserTracker
 * 
 * @method integer             getObjectId()            Returns the current record's "object_id" value
 * @method string              getObjectName()          Returns the current record's "object_name" value
 * @method integer             getRelatedObjectId()     Returns the current record's "related_object_id" value
 * @method string              getRelatedObjectName()   Returns the current record's "related_object_name" value
 * @method string              getTemplate()            Returns the current record's "template" value
 * @method enum                getAction()              Returns the current record's "action" value
 * @method enum                getType()                Returns the current record's "type" value
 * @method Doctrine_Collection getUserNotification()    Returns the current record's "UserNotification" collection
 * @method Doctrine_Collection getUserTracker()         Returns the current record's "UserTracker" collection
 * @method Notification        setObjectId()            Sets the current record's "object_id" value
 * @method Notification        setObjectName()          Sets the current record's "object_name" value
 * @method Notification        setRelatedObjectId()     Sets the current record's "related_object_id" value
 * @method Notification        setRelatedObjectName()   Sets the current record's "related_object_name" value
 * @method Notification        setTemplate()            Sets the current record's "template" value
 * @method Notification        setAction()              Sets the current record's "action" value
 * @method Notification        setType()                Sets the current record's "type" value
 * @method Notification        setUserNotification()    Sets the current record's "UserNotification" collection
 * @method Notification        setUserTracker()         Sets the current record's "UserTracker" collection
 * 
 * @package    Wikigrads
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseNotification extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('notification');
        $this->hasColumn('object_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => true,
             ));
        $this->hasColumn('object_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('related_object_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => true,
             ));
        $this->hasColumn('related_object_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('template', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('action', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Add',
              1 => 'Delete',
             ),
             'notnull' => false,
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Classmate',
              1 => 'Friend',
              2 => 'Everyone',
             ),
             'notnull' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UserNotification', array(
             'local' => 'id',
             'foreign' => 'notification_id'));

        $this->hasMany('UserTracker', array(
             'local' => 'id',
             'foreign' => 'notification_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}