<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $course_id
 * @property integer $user_id
 * @property string $name
 * @property clob $description
 * @property clob $location
 * @property timestamp $start_date
 * @property timestamp $end_date
 * @property Course $Course
 * @property sfGuardUser $sfGuardUser
 * @property Doctrine_Collection $UserEvent
 * 
 * @method integer             getCourseId()    Returns the current record's "course_id" value
 * @method integer             getUserId()      Returns the current record's "user_id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method clob                getDescription() Returns the current record's "description" value
 * @method clob                getLocation()    Returns the current record's "location" value
 * @method timestamp           getStartDate()   Returns the current record's "start_date" value
 * @method timestamp           getEndDate()     Returns the current record's "end_date" value
 * @method Course              getCourse()      Returns the current record's "Course" value
 * @method sfGuardUser         getSfGuardUser() Returns the current record's "sfGuardUser" value
 * @method Doctrine_Collection getUserEvent()   Returns the current record's "UserEvent" collection
 * @method Event               setCourseId()    Sets the current record's "course_id" value
 * @method Event               setUserId()      Sets the current record's "user_id" value
 * @method Event               setName()        Sets the current record's "name" value
 * @method Event               setDescription() Sets the current record's "description" value
 * @method Event               setLocation()    Sets the current record's "location" value
 * @method Event               setStartDate()   Sets the current record's "start_date" value
 * @method Event               setEndDate()     Sets the current record's "end_date" value
 * @method Event               setCourse()      Sets the current record's "Course" value
 * @method Event               setSfGuardUser() Sets the current record's "sfGuardUser" value
 * @method Event               setUserEvent()   Sets the current record's "UserEvent" collection
 * 
 * @package    Wikigrads
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('course_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));
        $this->hasColumn('location', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));
        $this->hasColumn('start_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('end_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Course', array(
             'local' => 'course_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('UserEvent', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}