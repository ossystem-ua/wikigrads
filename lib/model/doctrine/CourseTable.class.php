<?php

/**
 * CourseTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CourseTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object CourseTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Course');
    }
    
    /**
     * Get Course By Department ID Sql
     * 
     * Fetch sql for course by course department.
     *
     * @param unknown_type $department_id
     * @return unknown
     */
    public static function getCourseByDepartmentIdSql($department_id)
    {
        $sql = self::getInstance()->createQuery('c')
                ->where('c.department_id = ?', $department_id);        
        return $sql;
    }
    
    public static function getCourseCategory () {
        $sql = self::getInstance()->createQuery('c')
                ->andWhere('c.name = c.category')
                ->andWhere('c.deleted_at is null')
                ->andWhere('c.name is not null')
                ->andWhere('c.instructor is not null')
                ->andWhere('c.category is not null')
                ->groupBy('c.category')
                ->orderBy('c.category');        
        return $sql;
    }
    
 /**
     * Get Course By Slug
     * 
     * Fetch course by course slug.
     *
     * @param unknown_type $slug
     * @return unknown
     */
    public static function getCourseBySlug($slug)
    {
        $slug = urldecode($slug);
        $id = current(preg_split('#\|#', $slug, 2));
        
        $sql = Doctrine_Core::getTable('Course')->createQuery('c')
            ->where('c.id = ?', $id)
            ->addWhere('c.deleted_at IS NULL')
        ;
        
        return $sql->fetchOne();
    }  
    
    public function getOnlyParentsId() {
        $arr = array(); 
        
        $r = Doctrine::getTable('Post')
                ->createQuery('p')
                ->where('p.updated_at > ?', date('Y-m-d H:i:s', strtotime('-1 month')))
                ->execute();
        foreach ($r as $record) {
            $arr[] = $record->getId();
        }
        
        $q = Doctrine_Query::create()
                ->from('Course c')
                ->where('c.updated_at > ?', date('Y-m-d H:i:s', strtotime('-6 month')))
                ->orWhereIn('c.id', $arr)                
                ->groupBy('c.id')
                ->orderBy('c.name');        
        return $q->execute();
    }
    
    public function getOnlyInstructorCourse() {
        $r = Doctrine::getTable('InstructorCourse')
                ->createQuery('ic')
                ->groupBy('ic.course_id')
                ->execute();
        $arr = array();
        foreach ($r as $record) {
            $arr[] = $record->getCourseId();
        }
        
        $q = Doctrine_Query::create()
                ->from('Course c')
                ->whereIn('c.id', $arr)
                ->orderBy('c.name');                
        return $q->execute();
    }
    
    public function findOneByDepartmentAndName($department, $name)
    {
        if ($department instanceof Department) {
            $department = $department->getId();
        }

        $queryAlias = 'c';

        $name = trim($name);
        
        $match = $this->createQuery($queryAlias)
            ->where("$queryAlias.department_id = ?", $department)
            ->andWhere("LOWER($queryAlias.name) like ?", $name);

        $matchSql = $match->buildSqlQuery();

        //using plain SQL because DQL does not support UNION
        $fullQuery = $matchSql . ' UNION ALL ' . $matchSql . ' UNION ALL ' . $matchSql . ' LIMIT 1';

        //prioritize exact match, then starts with, then contains
        $courseArray = $this->getConnection()->fetchRow(
            $fullQuery,
            array($department, $name, $department, "$name%", $department, "%$name%")
        );

        //do some jank here to remove the table alias prefixes so we can hydrate the object
        if ($courseArray) {
            $courseKeys = array_keys($courseArray);
            array_walk($courseKeys, function(&$match) use ($queryAlias){
                $match = str_replace($queryAlias . '__', '', $match);
            });
            $courseArray = array_combine($courseKeys, array_values($courseArray));
        }
        
        if (!empty($courseArray)) {
            $course = new Course();
            $course->setArray($courseArray);
            return $course;
        }
        return false;
    }
        
}