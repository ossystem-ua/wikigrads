<?php

/**
 * BasesfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $post_count
 * @property string $first_name
 * @property string $last_name
 * @property string $email_address
 * @property string $username
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property boolean $is_officer
 * @property timestamp $last_login
 * @property string $lms_id
 * @property int $is_lms
 * @property string $lms_email
 * @property string $lms_domain
 * @property Doctrine_Collection $Groups
 * @property Doctrine_Collection $Permissions
 * @property sfGuardUserProfile $sfGuardUserProfile
 * @property Doctrine_Collection $Courses
 * @property Doctrine_Collection $Events
 * @property Doctrine_Collection $Friends
 * @property Doctrine_Collection $Schools
 * @property sfGuardUserProfile $Profile
 * @property Doctrine_Collection $InstructorCourse
 * @property sfGuardRememberKey $sfGuardRememberKey
 * @property Doctrine_Collection $sfGuardUser
 * @property Doctrine_Collection $sfGuardUserPermission
 * @property Doctrine_Collection $sfGuardUserGroup
 * @property sfGuardForgotPassword $ForgotPassword
 * @property Doctrine_Collection $User
 * @property Doctrine_Collection $Event
 * @property Doctrine_Collection $School
 * @property Doctrine_Collection $UserSchool
 * @property Doctrine_Collection $Course
 * @property Doctrine_Collection $UserCourse
 * @property Doctrine_Collection $UserSubject
 * @property Doctrine_Collection $Document
 * @property Doctrine_Collection $UserAttachment
 * @property Doctrine_Collection $Friend
 * @property Doctrine_Collection $FriendRequest
 * @property Doctrine_Collection $Post
 * @property Doctrine_Collection $UserNotification
 * @property Doctrine_Collection $UserTracker
 * 
 * @method integer               getPostCount()             Returns the current record's "post_count" value
 * @method string                getFirstName()             Returns the current record's "first_name" value
 * @method string                getLastName()              Returns the current record's "last_name" value
 * @method string                getEmailAddress()          Returns the current record's "email_address" value
 * @method string                getUsername()              Returns the current record's "username" value
 * @method string                getAlgorithm()             Returns the current record's "algorithm" value
 * @method string                getSalt()                  Returns the current record's "salt" value
 * @method string                getPassword()              Returns the current record's "password" value
 * @method boolean               getIsActive()              Returns the current record's "is_active" value
 * @method boolean               getIsSuperAdmin()          Returns the current record's "is_super_admin" value
 * @method boolean               getIsOfficer()             Returns the current record's "is_officer" value
 * @method timestamp             getLastLogin()             Returns the current record's "last_login" value
 * @method string                getLmsId()                 Returns the current record's "lms_id" value
 * @method int                   getIsLms()                 Returns the current record's "is_lms" value
 * @method string                getLmsEmail()              Returns the current record's "lms_email" value
 * @method string                getLmsDomain()             Returns the current record's "lms_domain" value
 * @method Doctrine_Collection   getGroups()                Returns the current record's "Groups" collection
 * @method Doctrine_Collection   getPermissions()           Returns the current record's "Permissions" collection
 * @method sfGuardUserProfile    getSfGuardUserProfile()    Returns the current record's "sfGuardUserProfile" value
 * @method Doctrine_Collection   getCourses()               Returns the current record's "Courses" collection
 * @method Doctrine_Collection   getEvents()                Returns the current record's "Events" collection
 * @method Doctrine_Collection   getFriends()               Returns the current record's "Friends" collection
 * @method Doctrine_Collection   getSchools()               Returns the current record's "Schools" collection
 * @method sfGuardUserProfile    getProfile()               Returns the current record's "Profile" value
 * @method Doctrine_Collection   getInstructorCourse()      Returns the current record's "InstructorCourse" collection
 * @method sfGuardRememberKey    getSfGuardRememberKey()    Returns the current record's "sfGuardRememberKey" value
 * @method Doctrine_Collection   getSfGuardUser()           Returns the current record's "sfGuardUser" collection
 * @method Doctrine_Collection   getSfGuardUserPermission() Returns the current record's "sfGuardUserPermission" collection
 * @method Doctrine_Collection   getSfGuardUserGroup()      Returns the current record's "sfGuardUserGroup" collection
 * @method sfGuardForgotPassword getForgotPassword()        Returns the current record's "ForgotPassword" value
 * @method Doctrine_Collection   getUser()                  Returns the current record's "User" collection
 * @method Doctrine_Collection   getEvent()                 Returns the current record's "Event" collection
 * @method Doctrine_Collection   getSchool()                Returns the current record's "School" collection
 * @method Doctrine_Collection   getUserSchool()            Returns the current record's "UserSchool" collection
 * @method Doctrine_Collection   getCourse()                Returns the current record's "Course" collection
 * @method Doctrine_Collection   getUserCourse()            Returns the current record's "UserCourse" collection
 * @method Doctrine_Collection   getUserSubject()           Returns the current record's "UserSubject" collection
 * @method Doctrine_Collection   getDocument()              Returns the current record's "Document" collection
 * @method Doctrine_Collection   getUserAttachment()        Returns the current record's "UserAttachment" collection
 * @method Doctrine_Collection   getFriend()                Returns the current record's "Friend" collection
 * @method Doctrine_Collection   getFriendRequest()         Returns the current record's "FriendRequest" collection
 * @method Doctrine_Collection   getPost()                  Returns the current record's "Post" collection
 * @method Doctrine_Collection   getUserNotification()      Returns the current record's "UserNotification" collection
 * @method Doctrine_Collection   getUserTracker()           Returns the current record's "UserTracker" collection
 * @method sfGuardUser           setPostCount()             Sets the current record's "post_count" value
 * @method sfGuardUser           setFirstName()             Sets the current record's "first_name" value
 * @method sfGuardUser           setLastName()              Sets the current record's "last_name" value
 * @method sfGuardUser           setEmailAddress()          Sets the current record's "email_address" value
 * @method sfGuardUser           setUsername()              Sets the current record's "username" value
 * @method sfGuardUser           setAlgorithm()             Sets the current record's "algorithm" value
 * @method sfGuardUser           setSalt()                  Sets the current record's "salt" value
 * @method sfGuardUser           setPassword()              Sets the current record's "password" value
 * @method sfGuardUser           setIsActive()              Sets the current record's "is_active" value
 * @method sfGuardUser           setIsSuperAdmin()          Sets the current record's "is_super_admin" value
 * @method sfGuardUser           setIsOfficer()             Sets the current record's "is_officer" value
 * @method sfGuardUser           setLastLogin()             Sets the current record's "last_login" value
 * @method sfGuardUser           setLmsId()                 Sets the current record's "lms_id" value
 * @method sfGuardUser           setIsLms()                 Sets the current record's "is_lms" value
 * @method sfGuardUser           setLmsEmail()              Sets the current record's "lms_email" value
 * @method sfGuardUser           setLmsDomain()             Sets the current record's "lms_domain" value
 * @method sfGuardUser           setGroups()                Sets the current record's "Groups" collection
 * @method sfGuardUser           setPermissions()           Sets the current record's "Permissions" collection
 * @method sfGuardUser           setSfGuardUserProfile()    Sets the current record's "sfGuardUserProfile" value
 * @method sfGuardUser           setCourses()               Sets the current record's "Courses" collection
 * @method sfGuardUser           setEvents()                Sets the current record's "Events" collection
 * @method sfGuardUser           setFriends()               Sets the current record's "Friends" collection
 * @method sfGuardUser           setSchools()               Sets the current record's "Schools" collection
 * @method sfGuardUser           setProfile()               Sets the current record's "Profile" value
 * @method sfGuardUser           setInstructorCourse()      Sets the current record's "InstructorCourse" collection
 * @method sfGuardUser           setSfGuardRememberKey()    Sets the current record's "sfGuardRememberKey" value
 * @method sfGuardUser           setSfGuardUser()           Sets the current record's "sfGuardUser" collection
 * @method sfGuardUser           setSfGuardUserPermission() Sets the current record's "sfGuardUserPermission" collection
 * @method sfGuardUser           setSfGuardUserGroup()      Sets the current record's "sfGuardUserGroup" collection
 * @method sfGuardUser           setForgotPassword()        Sets the current record's "ForgotPassword" value
 * @method sfGuardUser           setUser()                  Sets the current record's "User" collection
 * @method sfGuardUser           setEvent()                 Sets the current record's "Event" collection
 * @method sfGuardUser           setSchool()                Sets the current record's "School" collection
 * @method sfGuardUser           setUserSchool()            Sets the current record's "UserSchool" collection
 * @method sfGuardUser           setCourse()                Sets the current record's "Course" collection
 * @method sfGuardUser           setUserCourse()            Sets the current record's "UserCourse" collection
 * @method sfGuardUser           setUserSubject()           Sets the current record's "UserSubject" collection
 * @method sfGuardUser           setDocument()              Sets the current record's "Document" collection
 * @method sfGuardUser           setUserAttachment()        Sets the current record's "UserAttachment" collection
 * @method sfGuardUser           setFriend()                Sets the current record's "Friend" collection
 * @method sfGuardUser           setFriendRequest()         Sets the current record's "FriendRequest" collection
 * @method sfGuardUser           setPost()                  Sets the current record's "Post" collection
 * @method sfGuardUser           setUserNotification()      Sets the current record's "UserNotification" collection
 * @method sfGuardUser           setUserTracker()           Sets the current record's "UserTracker" collection
 * 
 * @package    Wikigrads
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasesfGuardUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_user');
        $this->hasColumn('post_count', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('first_name', 'string', 80, array(
             'type' => 'string',
             'length' => 80,
             'notnull' => true,
             ));
        $this->hasColumn('last_name', 'string', 80, array(
             'type' => 'string',
             'length' => 80,
             'notnull' => true,
             ));
        $this->hasColumn('email_address', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('username', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 128,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('is_super_admin', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_officer', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('lms_id', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('is_lms', 'int', 1, array(
             'type' => 'int',
             'notnull' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('lms_email', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('lms_domain', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));


        $this->index('is_active_idx', array(
             'fields' => 
             array(
              0 => 'is_active',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('sfGuardGroup as Groups', array(
             'refClass' => 'sfGuardUserGroup',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('sfGuardPermission as Permissions', array(
             'refClass' => 'sfGuardUserPermission',
             'local' => 'user_id',
             'foreign' => 'permission_id'));

        $this->hasOne('sfGuardUserProfile', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Course as Courses', array(
             'refClass' => 'UserCourse',
             'local' => 'user_id',
             'foreign' => 'course_id'));

        $this->hasMany('Event as Events', array(
             'refClass' => 'UserEvent',
             'local' => 'user_id',
             'foreign' => 'event_id'));

        $this->hasMany('sfGuardUser as Friends', array(
             'refClass' => 'Friend',
             'local' => 'user_id',
             'foreign' => 'friend_id'));

        $this->hasMany('School as Schools', array(
             'refClass' => 'UserSchool',
             'local' => 'user_id',
             'foreign' => 'school_id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUserProfile as Profile', array(
             'local' => 'id',
             'foreign' => 'user_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('InstructorCourse', array(
             'refClass' => 'InstructorCourse',
             'local' => 'id',
             'foreign' => 'user_id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardRememberKey', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('sfGuardUser', array(
             'refClass' => 'Friend',
             'local' => 'friend_id',
             'foreign' => 'user_id'));

        $this->hasMany('sfGuardUserPermission', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('sfGuardUserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardForgotPassword as ForgotPassword', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Issue as User', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Event', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('School', array(
             'local' => 'id',
             'foreign' => 'first_friend_id'));

        $this->hasMany('UserSchool', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Course', array(
             'local' => 'id',
             'foreign' => 'instructor_id'));

        $this->hasMany('UserCourse', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserSubject', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Document', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserAttachment', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Friend', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('FriendRequest', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Post', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserNotification', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserTracker', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}