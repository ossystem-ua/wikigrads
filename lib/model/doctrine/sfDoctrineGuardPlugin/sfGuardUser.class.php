<?php

/**
 * sfGuardUser
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    sf_sandbox_old
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser {

    public function addFirstFriend() {
        $schools = $this->getSchools();
        $first_friend = $schools[0]->getFirstFriend();
        $this->addFriend($first_friend);
        $first_friend->addFriend($this);
    }

    public function addFriend(sfGuardUser $newFriend) {
        if (!$this->hasFriend($newFriend)) {
            $friend = new Friend();
            $friend->setUserId($this->getId());
            $friend->setFriendId($newFriend->getId());
            $friend->save();
        }
    }

    public function addFriendRequest(sfGuardUser $friend) {
        $friendRequest = new FriendRequest();
        $friendRequest->setUserId($this->getId());
        $friendRequest->setFriendId($friend->getId());
        $friendRequest->setStatus('Pending');
        $friendRequest->save();
    }

    public function deleteFriend(sfGuardUser $friend) {
        return Doctrine_Core::getTable('Friend')->createQuery('f')
            ->delete()
            ->andWhere('f.friend_id = ?', $friend->getId())
            ->andWhere('f.user_id = ?', $this->getId())
            ->execute()
        ;
    }

    public function hasFriendPendingRequest(sfGuardUser $friend) {
        $sql = Doctrine_Core::getTable('FriendRequest')->createQuery('fr')
            ->where('fr.user_id = ?', $this->getId())
            ->andWhere('fr.friend_id = ?', $friend->getId())
            ->andWhere('fr.status = ?', FriendRequest::PENDING_STATUS)
        ;

        return $sql->fetchOne();
    }

    public function hasFriendRequest(sfGuardUser $friend, $status = '') {
        $sql = Doctrine_Core::getTable('FriendRequest')->createQuery('fr')
            ->where('fr.user_id = ?', $this->getId())
            ->andWhere('fr.friend_id = ?', $friend->getId())
        ;

        if ( ! empty($status)) {
            $sql->addWhere('fr.status = ?', $status);
        }

        return $sql->fetchOne();
    }

    public function hasFriend(sfGuardUser $friend) {
        return Doctrine_Core::getTable('Friend')->createQuery('f')
            ->andWhere('f.friend_id = ?', $friend->getId())
            ->andWhere('f.user_id = ?', $this->getId())
            ->fetchOne()
        ;
    }

    public function isFriend(sfGuardUser $friend) {
        return Doctrine_Core::getTable('Friend')->createQuery('f')
            ->andWhere('f.friend_id = ?', $friend->getId())
            ->andWhere('f.user_id = ?', $this->getId())
            ->fetchOne()
        ;
    }

    /**
    * Retrieve list of the user's friends (as defined in the 'friend' table).
    *
    * @param mixed $options
    * - hydration_mode: set doctrine hydration mode. pass in Doctrine_Core::HYDRATE_...
    * - index_by: determines what each element in the returned array/collection will be keyed on
    * @return mixed - Doctrine_Collection, Array
    */
    public function getFriendsList($options = array()) {
        $hydration_mode = Utils::getOptionValue($options, 'hydration_mode', Doctrine_Core::HYDRATE_RECORD);
        $index_by = Utils::getOptionValue($options, 'index_by');
        $alias = 'f' . (($index_by) ? ' INDEXBY '.$index_by : '');

        $sql = Doctrine_Core::getTable('Friend')->createQuery($alias)
            ->where('f.user_id = ?', $this->getId())
        ;

        $sql->setHydrationMode($hydration_mode);
        return $sql->execute();
    }

    /**
    * Retrieve list of the user's pending friends (as defined in the 'friend_request' table).
    *
    * @param mixed $options
    * - hydration_mode: set doctrine hydration mode. pass in Doctrine_Core::HYDRATE_...
    * - index_by: determines what each element in the returned array/collection will be keyed on
    * @return mixed - Doctrine_Collection, Array
    */
    public function getFriendsPendingList($options = array()) {
        $hydration_mode = Utils::getOptionValue($options, 'hydration_mode', Doctrine_Core::HYDRATE_RECORD);
        $index_by = Utils::getOptionValue($options, 'index_by');
        $alias = 'fr' . (($index_by) ? ' INDEXBY '.$index_by : '');

        $sql = Doctrine_Core::getTable('FriendRequest')->createQuery($alias)
            ->where('fr.user_id = ?', $this->getId())
            ->andWhere('fr.status = ?', 'Pending')
        ;

        $sql->setHydrationMode($hydration_mode);
        return $sql->execute();
    }

    public function getFriendStatusArray($other_user_id) {
/*
SELECT
    f.user_id, f.friend_id,
    CONCAT(u1.first_name, ' ', u1.last_name) AS user_name,
    CONCAT(u2.first_name, ' ', u2.last_name) AS friend_name
FROM `friend` f
    LEFT JOIN sf_guard_user as u1 ON u1.id = f.user_id
    LEFT JOIN sf_guard_user as u2 ON u2.id = f.friend_id
*/

        $user_id = $this->getId();
        #echo "<div>user_id: $user_id, other_user_id: $other_user_id</div>";
        $isSelf = ($user_id == $other_user_id);
        $isFriend = $isFriendPending = false;

        if( ! $isSelf) {
            $isFriend = Doctrine_Core::getTable('Friend')->createQuery('f')
                ->where('f.friend_id = ?', $other_user_id)
                ->andWhere('f.user_id = ?', $user_id)
                ->count()
            ;
            if( ! $isFriend) {
                $isFriendPending = Doctrine_Core::getTable('FriendRequest')->createQuery('fr')
                    ->where('fr.friend_id = ?', $other_user_id)
                    ->andWhere('fr.user_id = ?', $user_id)
                    ->andWhere('fr.status = ?', 'Pending')
                    ->count()
                ;
            }
        }

        $friend_status = array(
            'other_user_id'     =>  $other_user_id,
            'is_self'           =>  $isSelf,
            'is_friend'         =>  $isFriend,
            'is_friend_pending' =>  $isFriendPending
        );
        #Utils::pfa($friend_status);

        return $friend_status;
    }

    #####
    # FETCH
    ###

    /**
     * Course List
     *
     * Get list of courses
     *
     * @return unknown
     */
    public function getCourseList($options = array()) {
        $hydration_mode = Utils::getOptionValue($options, 'hydration_mode', Doctrine_Core::HYDRATE_RECORD);
        $index_by = Utils::getOptionValue($options, 'index_by');
        $alias = 'c' . (($index_by) ? ' INDEXBY '.$index_by : '');

        $sql = Doctrine_Core::getTable('Course')->createQuery($alias)
            ->leftJoin('c.UserCourse uc')
            ->leftJoin('c.Department')
            ->where('uc.user_id = ?', $this->id)
            ->orderBy('uc.created_at');
        $sql->setHydrationMode($hydration_mode);
        return $sql->execute();
    }

    public function getStaff() {
        return $this->getSfGuardUserProfile()->is_staff;
    }

    public function getTutor() {
        return $this->getSfGuardUserProfile()->is_tutor;
    }

    #####
    # FETCH
    ###

    /**
     * Course List
     *
     * Get list of courses
     *
     * @return unknown
     */
    public function getFormattedCourseList()
    {

    	$courses_list = $this->getCourseList();
    	$courses = array();

    	foreach ($courses_list as $course){
    		$courses[$course->getId()] = $course->getDoctrineChoiceOption();
    	}

        return $courses;
    }

    #####
    # FETCH
    ###

    /**
     * Document List
     *
     * Get list of courses
     *
     * @return unknown
     */
    public function getDocumentList()
    {
        $sql = Doctrine_Core::getTable('Document')->createQuery('d')

        ->where('d.user_id = ?', $this->id)
        ->orderBy('d.created_at DESC')
        ;

        return $sql->execute();
    }


    /**
     * Get user friend's requests
     * @param type $status
     * @return type
     */
    public function getFriendRequests($status = '') {
        $sql = Doctrine_Core::getTable('FriendRequest')->createQuery('fr')
                ->andWhere('fr.friend_id = ?', $this->getId());

        if (!empty($status)) {

            $sql->addWhere('fr.status = ?', $status);
        }

        return $sql->execute();
    }

    /**
     * Get friends that are enrolled in given course
     * @param Course $course
     * @return type
     */
    public function getFriendsByCourse(Course $course, $include_this_user = true){
        $sql = Doctrine_Core::getTable('SfGuardUser')->createQuery('u')
                ->leftJoin('u.Friend f ON u.id = f.friend_id')
                ->leftJoin('u.UserCourse uc ON f.friend_id = uc.user_id')
                ->where('f.user_id = ?', $this->getId())
                ->addWhere('uc.course_id = ?', $course->getId())
                ;

        $courseFriends = $sql->execute();

        //Include this user object to this set of course friends.
        if($include_this_user){
            $courseFriends[] = $this;
        }

        return $courseFriends;
    }

    /**
     * Returns the first and last name of the user concatenated together
     *
     * @return string $name
     */
    public function getName() {
        return ucwords(trim($this->getFirstName() . ' ' . $this->getLastName()));
    }

    public function getLocalImagePath($dir_only = false) {
        if ($dir_only) {
            return sfConfig::get('sf_upload_dir') . '/profile/' . $this->id;
        } elseif ($image = $this->sfGuardUserProfile->image) {
            return sfConfig::get('sf_upload_dir') . '/profile/' . $this->id . '/' . $image;
        }

        return false;
    }

    public static function getNotificationListByType($type = Notification::EVERYONE_TYPE, $notificationObjectType = NULL){

        //Get documents that were uploaded to this course
        switch ($type){
            case Notification::CLASSMATE_TYPE:

                  $notifications = self::getNotificationsByObject($notificationObjectType);

                break;
            case Notification::FRIEND_TYPE:
                break;
            default :
                $this->getAllUserNotifications();

        }

    }

    /**
     * Get notifications for this user
     * @return notifications
     */
    public function getNotifications() {
        $sql = Doctrine_Core::getTable('Notification')->createQuery('n INDEXBY n.id')
            ->leftJoin('n.UserNotification un')
            ->where('un.user_id = ?', $this->getId())
            ->orderBy('n.created_at DESC')
        ;

        $notifications = $sql->execute();
        #Utils::pfa($sql->fetchArray());

        $this->updateNotificationsWithExtras($notifications);

        return $notifications;
    }

    /**
     *
     * @param type $type .. $type is an array with a list of notification types or a single type
     */

    public function getNotificationsByType($type){
        $sql = Doctrine_Core::getTable('Notification')->createQuery('n INDEXBY n.id')
            ->leftJoin('n.UserNotification un')
            ->where('un.user_id = ?', $this->getId())
            ->orderBy('n.created_at DESC')
        ;
        #Utils::pfa($sql->fetchArray());

        if(is_array($type)){
            $sql->andWhereIn('n.type', $type);
        }
        else{
            $sql->addWhere('n.type = ?', $type);
        }

        Utils::dq_to_sql($sql);
        $notifications = $sql->execute();

        $this->updateNotificationsWithExtras($notifications);

        return $notifications;
    }


    /**
     * Get notifications that are related to object for this user
     *
     * @param type $objectType
     * @return type
     */
    public function getNotificationsByRelatedObject($relatedObject, $type = null) {
        $sql = Doctrine_Core::getTable('Notification')->createQuery('n')
            ->leftJoin('n.UserNotification un')
            ->where('un.user_id = ?', $this->getId())
            ->addWhere('n.related_object_id = ?', $relatedObject->getId())
            ->addWhere('n.related_object_name = ?', $relatedObject->getTable()->getTableName())
            ->orderBy('n.created_at DESC')
        ;
        if($type){
            $sql->addWhere('n.type = ?', $type);
        }
        $notifications = $sql->execute();

        $this->updateNotificationsWithExtras($notifications);

        return $notifications;

    }

    /**
    * Update notifications with object instances, permissions, and friend status.
    *
    */
    protected function updateNotificationsWithExtras($notifications) {
        $courses = $this->getCourseList(array(
            'hydration_mode'    =>  Doctrine_Core::HYDRATE_ARRAY,
            'index_by'          =>  'c.id'
        ));
        $friends = $this->getFriendsList(array(
            'hydration_mode'    =>  Doctrine_Core::HYDRATE_ARRAY,
            'index_by'          =>  'f.friend_id'
        ));
        $friendsPending = $this->getFriendsPendingList(array(
            'hydration_mode'    =>  Doctrine_Core::HYDRATE_ARRAY,
            'index_by'          =>  'fr.friend_id'
        ));

        NotificationTable::hydrateNotificationObjects($notifications);
        NotificationTable::setNotificationPermissions($courses, $friends, $notifications);
        NotificationTable::setNotificationFriendStatus($this, $friends, $friendsPending, $notifications);

        // update notifications with any comments
        #NotificationTable::setNotificationComments($notifications);
    }

    /**
     * Get school user enrolled with
     */
    public function getMainSchool() {
        $schools = $this->getSchools();

        return $schools[0];
    }

    public function getMainSchoolInfo() {
        $userSchools = $this->getUserSchool();
        $school = $userSchools[0];
        $info = array(
            'name'  =>  $school->getSchool()->getName(),
            'year'  =>  $school->getClassYear(),
            'major' =>  $school->getMajor()
        );
        return $info;
    }

    public function getThumbnailImagePath($width, $height, $square = false, $absolute = false) {
        $default_avatar = '/images/default_avatar.png';

        $def_dir = Utils::getUserProfileImageDirectory($this->id);

        if ($this->getSfGuardUserProfile() && $this->getSfGuardUserProfile()->getImage()) {
            $file = $def_dir . '/' . $this->getSfGuardUserProfile()->getImage();
        } else {
            $file = $default_avatar;
        }

        $relurl = sfContext::getInstance()->getRequest()->getRelativeUrlRoot();

        $thumb[] = Utils::getUserProfileImageDirectory($this->id);
        $thumb[] = 'thumbnails';

        $thumb_path = join('/', $thumb);


        if ($relurl && false !== strpos($file, $relurl)) {
            $file = substr($file, strlen($relurl));
        }

        try {

            if (!file_exists(sfConfig::get('sf_web_dir') . $file)) {
                $file = $default_avatar;
            }

            $image_size = getimagesize(sfConfig::get('sf_web_dir') . $file);

            // do not thumbnail if the image is smaller than the thumbnail
            if ($image_size[0] < $width && $image_size[1] < $height) {
                $path = $file;
            } else {
                $path = Utils::thumbnail_path($file, $thumb_path, array(
                            'width' => $width,
                            'height' => $height,
                            'square' => $square,
                            'absolute' => $absolute,
                        ));
            }
        } catch (Exception $e) {
            $path = $file;
        }

        return $path;
    }

}
